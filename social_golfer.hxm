use io;

/* Read instance data */
function input() {
    local usage = "Usage: hexaly social_golfer.hxm "
            + "inFileName=inputFile [solFileName=outputFile] [hxTimeLimit=timeLimit]";

    if (inFileName == nil) throw usage;

    local inFile = io.openRead(inFileName);
    nbGroups = inFile.readInt();
    groupSize = inFile.readInt();
    nbWeeks = inFile.readInt();

    nbGolfers = nbGroups * groupSize;
}

/* Declare the optimization model */
function model() {
    // Decision variables
    // 0-1 decisions variables: x[w][gr][gf]=1 if golfer gf is in group gr on week w
    x[w in 0...nbWeeks][gr in 0...nbGroups][gf in 0...nbGolfers] <- bool();

    // Each week, each golfer is assigned to exactly one group
    for [w in 0...nbWeeks][gf in 0...nbGolfers]
        constraint sum[gr in 0...nbGroups](x[w][gr][gf]) == 1;

    // Each week, each group contains exactly groupSize golfers
    for [w in 0...nbWeeks][gr in 0...nbGroups]
        constraint sum[gf in 0...nbGolfers](x[w][gr][gf]) == groupSize;

    // Golfers gf0 and gf1 meet in group gr on week w if both are
    // assigned to this group for week w
    meetings[w in 0...nbWeeks][gr in 0...nbGroups][gf0 in 0...nbGolfers][gf1 in gf0+1...nbGolfers]
            <- and(x[w][gr][gf0], x[w][gr][gf1]);

    // The number of meetings of golfers gf0 and gf1 is the sum
    // of their meeting variables over all weeks and groups
    for [gf0 in 0...nbGolfers][gf1 in gf0+1...nbGolfers] {
        nb_meetings[gf0][gf1] <- sum[w in 0...nbWeeks][gr in 0...nbGroups](meetings[w][gr][gf0][gf1]);
        redundant_meetings[gf0][gf1] <- max(nb_meetings[gf0][gf1] -1, 0);
    }

    // The goal is to minimize the number of redundant meetings
    obj <- sum[gf0 in 0...nbGolfers][gf1 in gf0+1...nbGolfers](redundant_meetings[gf0][gf1]);
    minimize obj;
}

/* Parametrize the solver */
function param() {
    if (hxTimeLimit == nil) hxTimeLimit = 10;
}

/* Write the solution in a file with the following format:
 * - the objective value
 * - for each week and each group, write the golfers of the group 
 * (nbWeeks x nbGroupes lines of groupSize numbers). */
function output() {
    if (solFileName == nil) return;
    local solution = io.openWrite(solFileName);
    solution.println(obj.value);
    for [w in 0...nbWeeks] {
        for [gr in 0...nbGroups] {
            for [gf in 0...nbGolfers] {
                if (x[w][gr][gf].value==true) {
                    solution.print(gf, " ");
                }
            }
            solution.println();
        }
        solution.println();
    }
}
